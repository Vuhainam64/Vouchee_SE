// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vouchee.Data.Helpers;

#nullable disable

namespace Vouchee.Data.Migrations
{
    [DbContext(typeof(VoucheeContext))]
    [Migration("20250103134145_RemoveResScore")]
    partial class RemoveResScore
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AddressBrand", b =>
                {
                    b.Property<Guid>("AddressesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AddressesId", "BrandsId");

                    b.HasIndex("BrandsId");

                    b.ToTable("AddressBrand");
                });

            modelBuilder.Entity("CategoryVoucher", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VouchersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoriesId", "VouchersId");

                    b.HasIndex("VouchersId");

                    b.ToTable("CategoryVoucher");
                });

            modelBuilder.Entity("DeviceTokenUser", b =>
                {
                    b.Property<Guid>("DeviceTokensId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DeviceTokensId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("DeviceTokenUser");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Lat")
                        .HasColumnType("decimal(38, 20)");

                    b.Property<decimal?>("Lon")
                        .HasColumnType("decimal(38, 20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Cart", b =>
                {
                    b.Property<Guid?>("BuyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("BuyerId", "ModalId");

                    b.HasIndex("ModalId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("VoucherTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VoucherTypeId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.DeviceToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DeviceToken");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<Guid?>("RatingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RefundRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RatingId");

                    b.HasIndex("RefundRequestId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Modal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("OriginalPrice")
                        .HasColumnType("int");

                    b.Property<int>("SellPrice")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VoucherId");

                    b.ToTable("Modal");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.MoneyRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MoneyRequest");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DiscountPrice")
                        .HasColumnType("int");

                    b.Property<string>("GiftEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PartnerTransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UsedBalance")
                        .HasColumnType("int");

                    b.Property<int>("UsedVPoint")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.HasIndex("PartnerTransactionId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.OrderDetail", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ModalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ShopDiscountMoney")
                        .HasColumnType("int");

                    b.Property<int>("ShopDiscountPercent")
                        .HasColumnType("int");

                    b.Property<Guid?>("ShopPromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("OrderId", "ModalId");

                    b.HasIndex("ModalId");

                    b.HasIndex("ShopPromotionId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.PartnerTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Accumulated")
                        .HasColumnType("int");

                    b.Property<int>("AmountIn")
                        .HasColumnType("int");

                    b.Property<int>("AmountOut")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gateway")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartnerTransactionId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PartnerTransaction");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PercentDiscount")
                        .HasColumnType("int");

                    b.Property<Guid?>("SellerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("Stock")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("Promotion");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("QualityStar")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReplyBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReplyDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SellerStar")
                        .HasColumnType("int");

                    b.Property<int>("ServiceStar")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ModalId");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasFilter("[OrderId] IS NOT NULL");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.RefundRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(38, 20)");

                    b.Property<decimal>("Lon")
                        .HasColumnType("decimal(38, 20)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("VoucherCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VoucherCodeId")
                        .IsUnique()
                        .HasFilter("[VoucherCodeId] IS NOT NULL");

                    b.ToTable("RefundRequest");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("VerifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("VerifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAccessTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VPoint")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("SellerId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Voucher");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.VoucherCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NewCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UpdateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdateStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VerifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("VerifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ModalId");

                    b.HasIndex("OrderId");

                    b.ToTable("VoucherCode");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.VoucherType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("VoucherType");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<string>("BankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BuyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SellerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId")
                        .IsUnique()
                        .HasFilter("[BuyerId] IS NOT NULL");

                    b.HasIndex("SellerId")
                        .IsUnique()
                        .HasFilter("[SellerId] IS NOT NULL");

                    b.HasIndex("SupplierId")
                        .IsUnique()
                        .HasFilter("[SupplierId] IS NOT NULL");

                    b.ToTable("Wallet");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.WalletTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("AfterBalance")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("BeforeBalance")
                        .HasColumnType("int");

                    b.Property<Guid?>("BuyerWalletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("PartnerTransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RefundRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SellerWalletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SupplierWalletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TopUpRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WithdrawRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerWalletId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PartnerTransactionId");

                    b.HasIndex("RefundRequestId")
                        .IsUnique()
                        .HasFilter("[RefundRequestId] IS NOT NULL");

                    b.HasIndex("SellerWalletId");

                    b.HasIndex("SupplierWalletId");

                    b.HasIndex("TopUpRequestId")
                        .IsUnique()
                        .HasFilter("[TopUpRequestId] IS NOT NULL");

                    b.HasIndex("WithdrawRequestId")
                        .IsUnique()
                        .HasFilter("[WithdrawRequestId] IS NOT NULL");

                    b.ToTable("WalletTransaction");
                });

            modelBuilder.Entity("AddressBrand", b =>
                {
                    b.HasOne("Vouchee.Data.Models.Entities.Address", null)
                        .WithMany()
                        .HasForeignKey("AddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vouchee.Data.Models.Entities.Brand", null)
                        .WithMany()
                        .HasForeignKey("BrandsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryVoucher", b =>
                {
                    b.HasOne("Vouchee.Data.Models.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vouchee.Data.Models.Entities.Voucher", null)
                        .WithMany()
                        .HasForeignKey("VouchersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeviceTokenUser", b =>
                {
                    b.HasOne("Vouchee.Data.Models.Entities.DeviceToken", null)
                        .WithMany()
                        .HasForeignKey("DeviceTokensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vouchee.Data.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Cart", b =>
                {
                    b.HasOne("Vouchee.Data.Models.Entities.User", "Buyer")
                        .WithMany("Carts")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vouchee.Data.Models.Entities.Modal", "Modal")
                        .WithMany("Carts")
                        .HasForeignKey("ModalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Modal");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Category", b =>
                {
                    b.HasOne("Vouchee.Data.Models.Entities.VoucherType", "VoucherType")
                        .WithMany("Categories")
                        .HasForeignKey("VoucherTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VoucherType");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Media", b =>
                {
                    b.HasOne("Vouchee.Data.Models.Entities.Rating", "Rating")
                        .WithMany("Medias")
                        .HasForeignKey("RatingId");

                    b.HasOne("Vouchee.Data.Models.Entities.RefundRequest", "RefundRequest")
                        .WithMany("Medias")
                        .HasForeignKey("RefundRequestId");

                    b.HasOne("Vouchee.Data.Models.Entities.Voucher", "Voucher")
                        .WithMany("Medias")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Rating");

                    b.Navigation("RefundRequest");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Modal", b =>
                {
                    b.HasOne("Vouchee.Data.Models.Entities.Voucher", "Voucher")
                        .WithMany("Modals")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.MoneyRequest", b =>
                {
                    b.HasOne("Vouchee.Data.Models.Entities.User", "User")
                        .WithMany("MoneyRequests")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Notification", b =>
                {
                    b.HasOne("Vouchee.Data.Models.Entities.User", "Receiver")
                        .WithMany("ReceiverNotifications")
                        .HasForeignKey("ReceiverId");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Order", b =>
                {
                    b.HasOne("Vouchee.Data.Models.Entities.User", "Buyer")
                        .WithMany("Orders")
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vouchee.Data.Models.Entities.PartnerTransaction", "PartnerTransaction")
                        .WithMany("Orders")
                        .HasForeignKey("PartnerTransactionId");

                    b.Navigation("Buyer");

                    b.Navigation("PartnerTransaction");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.OrderDetail", b =>
                {
                    b.HasOne("Vouchee.Data.Models.Entities.Modal", "Modal")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ModalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vouchee.Data.Models.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vouchee.Data.Models.Entities.Promotion", "ShopPromotion")
                        .WithMany("ShopPromotionOrderDetails")
                        .HasForeignKey("ShopPromotionId");

                    b.Navigation("Modal");

                    b.Navigation("Order");

                    b.Navigation("ShopPromotion");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Promotion", b =>
                {
                    b.HasOne("Vouchee.Data.Models.Entities.User", "Seller")
                        .WithMany("ShopPromotions")
                        .HasForeignKey("SellerId");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Rating", b =>
                {
                    b.HasOne("Vouchee.Data.Models.Entities.Modal", "Modal")
                        .WithMany("Ratings")
                        .HasForeignKey("ModalId");

                    b.HasOne("Vouchee.Data.Models.Entities.Order", "Order")
                        .WithOne("Rating")
                        .HasForeignKey("Vouchee.Data.Models.Entities.Rating", "OrderId");

                    b.Navigation("Modal");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.RefundRequest", b =>
                {
                    b.HasOne("Vouchee.Data.Models.Entities.VoucherCode", "VoucherCode")
                        .WithOne("RefundRequest")
                        .HasForeignKey("Vouchee.Data.Models.Entities.RefundRequest", "VoucherCodeId");

                    b.Navigation("VoucherCode");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.User", b =>
                {
                    b.HasOne("Vouchee.Data.Models.Entities.Supplier", "Supplier")
                        .WithMany("Users")
                        .HasForeignKey("SupplierId");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Voucher", b =>
                {
                    b.HasOne("Vouchee.Data.Models.Entities.Brand", "Brand")
                        .WithMany("Vouchers")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vouchee.Data.Models.Entities.User", "Seller")
                        .WithMany("Vouchers")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vouchee.Data.Models.Entities.Supplier", "Supplier")
                        .WithMany("Vouchers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Seller");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.VoucherCode", b =>
                {
                    b.HasOne("Vouchee.Data.Models.Entities.Modal", "Modal")
                        .WithMany("VoucherCodes")
                        .HasForeignKey("ModalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vouchee.Data.Models.Entities.Order", "Order")
                        .WithMany("VoucherCodes")
                        .HasForeignKey("OrderId");

                    b.Navigation("Modal");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Wallet", b =>
                {
                    b.HasOne("Vouchee.Data.Models.Entities.User", "Buyer")
                        .WithOne("BuyerWallet")
                        .HasForeignKey("Vouchee.Data.Models.Entities.Wallet", "BuyerId");

                    b.HasOne("Vouchee.Data.Models.Entities.User", "Seller")
                        .WithOne("SellerWallet")
                        .HasForeignKey("Vouchee.Data.Models.Entities.Wallet", "SellerId");

                    b.HasOne("Vouchee.Data.Models.Entities.Supplier", "Supplier")
                        .WithOne("SupplierWallet")
                        .HasForeignKey("Vouchee.Data.Models.Entities.Wallet", "SupplierId");

                    b.Navigation("Buyer");

                    b.Navigation("Seller");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.WalletTransaction", b =>
                {
                    b.HasOne("Vouchee.Data.Models.Entities.Wallet", "BuyerWallet")
                        .WithMany("BuyerWalletTransactions")
                        .HasForeignKey("BuyerWalletId");

                    b.HasOne("Vouchee.Data.Models.Entities.Order", "Order")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("OrderId");

                    b.HasOne("Vouchee.Data.Models.Entities.PartnerTransaction", "PartnerTransaction")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("PartnerTransactionId");

                    b.HasOne("Vouchee.Data.Models.Entities.RefundRequest", "RefundRequest")
                        .WithOne("WalletTransaction")
                        .HasForeignKey("Vouchee.Data.Models.Entities.WalletTransaction", "RefundRequestId");

                    b.HasOne("Vouchee.Data.Models.Entities.Wallet", "SellerWallet")
                        .WithMany("SellerWalletTransactions")
                        .HasForeignKey("SellerWalletId");

                    b.HasOne("Vouchee.Data.Models.Entities.Wallet", "SupplierWallet")
                        .WithMany("SupplierWalletTransactions")
                        .HasForeignKey("SupplierWalletId");

                    b.HasOne("Vouchee.Data.Models.Entities.MoneyRequest", "TopUpRequest")
                        .WithOne("TopUpWalletTransaction")
                        .HasForeignKey("Vouchee.Data.Models.Entities.WalletTransaction", "TopUpRequestId");

                    b.HasOne("Vouchee.Data.Models.Entities.MoneyRequest", "WithDrawRequest")
                        .WithOne("WithdrawWalletTransaction")
                        .HasForeignKey("Vouchee.Data.Models.Entities.WalletTransaction", "WithdrawRequestId");

                    b.Navigation("BuyerWallet");

                    b.Navigation("Order");

                    b.Navigation("PartnerTransaction");

                    b.Navigation("RefundRequest");

                    b.Navigation("SellerWallet");

                    b.Navigation("SupplierWallet");

                    b.Navigation("TopUpRequest");

                    b.Navigation("WithDrawRequest");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Brand", b =>
                {
                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Modal", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderDetails");

                    b.Navigation("Ratings");

                    b.Navigation("VoucherCodes");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.MoneyRequest", b =>
                {
                    b.Navigation("TopUpWalletTransaction");

                    b.Navigation("WithdrawWalletTransaction");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Rating");

                    b.Navigation("VoucherCodes");

                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.PartnerTransaction", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Promotion", b =>
                {
                    b.Navigation("ShopPromotionOrderDetails");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Rating", b =>
                {
                    b.Navigation("Medias");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.RefundRequest", b =>
                {
                    b.Navigation("Medias");

                    b.Navigation("WalletTransaction");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Supplier", b =>
                {
                    b.Navigation("SupplierWallet");

                    b.Navigation("Users");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.User", b =>
                {
                    b.Navigation("BuyerWallet");

                    b.Navigation("Carts");

                    b.Navigation("MoneyRequests");

                    b.Navigation("Orders");

                    b.Navigation("ReceiverNotifications");

                    b.Navigation("SellerWallet");

                    b.Navigation("ShopPromotions");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Voucher", b =>
                {
                    b.Navigation("Medias");

                    b.Navigation("Modals");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.VoucherCode", b =>
                {
                    b.Navigation("RefundRequest");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.VoucherType", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Vouchee.Data.Models.Entities.Wallet", b =>
                {
                    b.Navigation("BuyerWalletTransactions");

                    b.Navigation("SellerWalletTransactions");

                    b.Navigation("SupplierWalletTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
