name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --no-build --verbosity normal

  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/myimage:1 .

      - name: Push Docker image
        run: |
          echo "Pushing Docker image..."
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/myimage:1

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Add SSH key
        run: |
          echo "Adding SSH key..."
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_PRIVATE_IP }} >> ~/.ssh/known_hosts

      - name: Clean up old containers and images
        run: |
          echo "Cleaning up old containers and images on the server..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SSH_PRIVATE_NAME }}@${{ secrets.SSH_PRIVATE_IP }} "docker stop \$(docker ps -aq) && docker rm \$(docker ps -aq) && docker rmi \$(docker images -q)"

      - name: Deploy application
        run: |
          echo "Deploying application to the server..."
          # Pull the latest code from the repository
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SSH_PRIVATE_NAME }}@${{ secrets.SSH_PRIVATE_IP }} "cd /var/www/Vouchee_SE && git pull"

          # Pull the latest Docker image and run it
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SSH_PRIVATE_NAME }}@${{ secrets.SSH_PRIVATE_IP }} "docker pull ${{ secrets.DOCKER_USERNAME }}/myimage:1 && docker run -d --restart unless-stopped -p 5000:5000 ${{ secrets.DOCKER_USERNAME }}/myimage:1"

          # Run the Nginx container
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SSH_PRIVATE_NAME }}@${{ secrets.SSH_PRIVATE_IP }} "docker run -d -p 10000:80 nginx"
