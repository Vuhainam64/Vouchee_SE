name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/myimage:1 .

      - name: Push Docker image
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/myimage:1

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ensure this job runs after the build job
    steps:
      - name: Add SSH key
        run: |
          set -x
          ls -la $HOME  # List contents of the home directory
          mkdir -p $HOME/.ssh  # Create .ssh directory
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > $HOME/.ssh/id_rsa  # Store the SSH key
          chmod 600 $HOME/.ssh/id_rsa  # Set permissions for the key
          ssh-keyscan -H ${{ secrets.SSH_PRIVATE_IP }} >> $HOME/.ssh/known_hosts  # Add host to known hosts

      - name: Pull latest code
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SSH_PRIVATE_NAME }}@${{ secrets.SSH_PRIVATE_IP }} "cd /home/vouchee/Vouchee_SE && git pull"
          
      - name: Update and deploy on VM
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SSH_PRIVATE_NAME }}@${{ secrets.SSH_PRIVATE_IP }} << 'EOF'
            # Pull the latest image
            docker pull ${{ secrets.DOCKER_USERNAME }}/myimage:1
            
            # Lấy ID của container mới nhất
            latest_container_id=$(docker ps -q -n 1)
            
            # Dừng và xóa tất cả các container
            docker stop $(docker ps -aq)
            docker rm $(docker ps -aq)
            
            # Lấy ID của image mới nhất
            latest_image_id=$(docker images -q | head -n 1)
            
            # Xóa tất cả các image ngoại trừ cái mới nhất
            docker images -q | grep -v "$latest_image_id" | xargs -r docker rmi

            # Khởi động container mới
            docker run -d -p 8080:8080 \
            -e GOOGLE_APPLICATION_CREDENTIALS="${{ secrets.GG_PATH }}" \
            -v "${{ secrets.GG_PATH }}:${{ secrets.GG_PATH }}" \
            --restart unless-stopped ${{ secrets.DOCKER_USERNAME }}/myimage:1

            # docker run -d -p 8080:8080 --restart unless-stopped ${{ secrets.DOCKER_USERNAME }}/myimage:1
          EOF

     
